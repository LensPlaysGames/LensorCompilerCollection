================
x86_64 SysV Parameter Lowering: One i64
================

func (exported): ccc void(i64 %0):
  bb0:
    %1 = copy i64 %0
    return

---

func:
  bb0:
    mov rdi.64 rax.64 {CLOBBERS: op.1}
    ret
memcpy:


================
x86_64 SysV Parameter Lowering: Two i64
================

func (exported): ccc void(i64 %0, i64 %1):
  bb0:
    %2 = copy i64 %0
    %3 = copy i64 %1
    return

---

func:
  bb0:
    mov rdi.64 rax.64 {CLOBBERS: op.1}
    mov rsi.64 rax.64 {CLOBBERS: op.1}
    ret
memcpy:


================
x86_64 SysV Parameter Lowering: Three i64
================

func (exported): ccc void(i64 %0, i64 %1, i64 %2):
  bb0:
    %3 = copy i64 %0
    %4 = copy i64 %1
    %5 = copy i64 %2
    return

---

func:
  bb0:
    mov rdi.64 rax.64 {CLOBBERS: op.1}
    mov rsi.64 rax.64 {CLOBBERS: op.1}
    mov rdx.64 rax.64 {CLOBBERS: op.1}
    ret
memcpy:

================
x86_64 SysV Parameter Lowering: Four i64
================

func (exported): ccc void(i64 %0, i64 %1, i64 %2, i64 %3):
  bb0:
    %4 = copy i64 %0
    %5 = copy i64 %1
    %6 = copy i64 %2
    %7 = copy i64 %3
    return

---

func:
  bb0:
    mov rdi.64 rax.64 {CLOBBERS: op.1}
    mov rsi.64 rax.64 {CLOBBERS: op.1}
    mov rdx.64 rax.64 {CLOBBERS: op.1}
    mov rcx.64 rax.64 {CLOBBERS: op.1}
    ret
memcpy:

================
x86_64 SysV Parameter Lowering: Five i64
================

func (exported): ccc void(i64 %0, i64 %1, i64 %2, i64 %3, i64 %4):
  bb0:
    %5 = copy i64 %0
    %6 = copy i64 %1
    %7 = copy i64 %2
    %8 = copy i64 %3
    %9 = copy i64 %4
    return

---

func:
  bb0:
    mov rdi.64 rax.64 {CLOBBERS: op.1}
    mov rsi.64 rax.64 {CLOBBERS: op.1}
    mov rdx.64 rax.64 {CLOBBERS: op.1}
    mov rcx.64 rax.64 {CLOBBERS: op.1}
    mov r8.64 rax.64 {CLOBBERS: op.1}
    ret
memcpy:


================
x86_64 SysV Parameter Lowering: Six i64
================

func (exported): ccc void(i64 %0, i64 %1, i64 %2, i64 %3, i64 %4, i64 %5):
  bb0:
    %6 = copy i64 %0
    %7 = copy i64 %1
    %8 = copy i64 %2
    %9 = copy i64 %3
    %10 = copy i64 %4
    %11 = copy i64 %5
    return

---

func:
  bb0:
    mov rdi.64 rax.64 {CLOBBERS: op.1}
    mov rsi.64 rax.64 {CLOBBERS: op.1}
    mov rdx.64 rax.64 {CLOBBERS: op.1}
    mov rcx.64 rax.64 {CLOBBERS: op.1}
    mov r8.64 rax.64 {CLOBBERS: op.1}
    mov r9.64 rax.64 {CLOBBERS: op.1}
    ret
memcpy:

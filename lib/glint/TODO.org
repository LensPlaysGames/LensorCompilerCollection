* Range-based =for= Loop

=for <identifier> in <container-expression> <body-expression>=

=for x in y z;=

* =print=

Basically, I think I want =print= to just be syntactic sugar for mapping all given arguments to =puts()= via =format()=.

=print "foo:" 42;= should print =foo:42=. Via =puts("foo:");puts(format(42));=.

** Custom Types

Just implement =format : [byte](:T) { ... }= for your type, and rely on function overloading for everything to "just work"â„¢.

** String Interpolation

Eventually we will probably want a way to do =printf "foo:{} bar:{}\n" 42 27;= or something like that.

* <Development Aid> Tests Recall

Basically, when you run =glinttests=, save the results. If old results are found, show comparison between old results and new results (i.e. "this test is NOW FAILING").

================
Match
================

foo : sum {
  x : int;
  y : int;
};

bar : foo;
bar.x := 69;
;; bar.y := 69;

out : int;
match bar {
  .x : out := bar.x;
  .y : out := 42;
};
out;

---

(block
 (type_declaration)
 (block (variable_declaration) (block (call (name) (cast (unary_addressof (name))) (evaluated_constant) (evaluated_constant))))
 (binary_assignment (member_access (name)) (integer_literal))
 (block (variable_declaration) (block (call (name) (cast (unary_addressof (name))) (evaluated_constant) (evaluated_constant))))
 (if (unary_has (member_access (name))) (binary_assignment (name) (cast (member_access (name)))) (if (unary_has (member_access (name))) (binary_assignment (name) (integer_literal))))
 (return (cast (name))))

================
Error on Match Must Handle All Members of Composite Type
:fail_sema
================

foo : sum {
  x : int;
  y : int;
};

bar : foo;
bar.x := 69;

out : int;
match bar {
  .x : out := bar.x;
};
out;

---

()
